#+title: init.org
#+property: header-args:emacs-lisp :tangle ~/.emacs.d/init.el

* Startup

** Early Init

See [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Early-Init-File.html][The Early Init File]].

#+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
  ;; -*- lexical-binding: t; -*-
  (setq default-frame-alist
        '((width . 120)
          (height . 45)))
  (setq
   frame-inhibit-implied-resize t
   inhibit-startup-message t
   native-comp-async-report-warnings-errors nil
   package-enable-at-startup nil)
#+end_src

** Startup Timer

#+begin_src emacs-lisp
  (defun display-startup-echo-area-message ()
    (message
     (format "ZyEmacs ready in %.2f seconds."
             (float-time
              (time-subtract after-init-time before-init-time)))))
#+end_src

** Adjust GC

Prohibit GC at startup, and adjust the threshold thereafter.

#+begin_src emacs-lisp
  (setq gc-cons-threshold most-positive-fixnum
        gc-cons-percentage 0.5)
  (add-hook 'emacs-startup-hook
            (lambda ()
              (setq gc-cons-threshold (* 32 1024 1024)
                    gc-cons-percentage 0.1)))
#+end_src

** Constants

#+begin_src emacs-lisp
  (defconst *win64* (eq system-type 'windows-nt)
    "If Emacs is run on Windows.")
  (defconst *linux* (or (eq system-type 'gnu/linux)
                      (eq system-type 'linux))
    "If Emacs is run on Linux.")
  (defconst *first-install* t
    "Its value is t during the first install of ZyEmacs.")
#+end_src

** Load ~custom.el~

#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))
#+end_src

** Load libraries

#+begin_src emacs-lisp
  (require 'cl-lib)
  (require 'cl-extra)
#+end_src

** Lisp Path

#+begin_src emacs-lisp
  (let ((lisp-directories
	 '("lisp" "site-lisp")))
    (dolist (dir lisp-directories)
      (setq dir (expand-file-name dir user-emacs-directory))
      (when (file-directory-p dir)
	(let ((default-directory dir))
	  (normal-top-level-add-subdirs-to-load-path)))))
#+end_src

** User Paths

Zybox is the collection of my personal files.

#+begin_src emacs-lisp
  (defvar zy/zybox-path nil
    "The path of Zybox, the collection of all my files.

  This value should be manually set in custom.el, as it is
  different on different machines.")

  (defun zy:file-directory-ret (path)
    (when (file-directory-p path)
      path))

  (unless zy/zybox-path
    (let* ((zybox-possible-locs-win64
            '("C:\\Zybox"
              "C:\\Users\\zyxir\\Zybox"
              "C:\\Users\\zyxir\\Documents\\Zybox"))
           (zybox-possible-locs-linux
            '("~/Zybox"
              "~/Documents/Zybox"
              "/mnt/c/Zybox"
              "/mnt/c/Users/zyxir/Zybox"
              "/mnt/c/Users/Documents/Zybox"))
           (guessed-zybox-path
            (cl-some
             #'zy:file-directory-ret
             (cond
              (*win64* zybox-possible-locs-win64)
              (*linux* zybox-possible-locs-linux)))))
      (if guessed-zybox-path
          (progn
            (setq zy/zybox-path guessed-zybox-path)
            (lwarn 'zyemacs :warning "Zybox is auto-detected at %s." zy/zybox-path)
            (customize-save-variable 'zy/zybox-path zy/zybox-path))
        (lwarn 'zyemacs :warning "Could not auto-detect Zybox."))))
#+end_src

* Utilities

** Candies

*** ~zy!add-hook~

#+begin_src emacs-lisp
  (defmacro zy!add-hook (hook &rest body)
    "Add a lambda function of BODY to the value of HOOK."
    (declare (indent 1) (debug (form def-body)))
    `(add-hook ,hook (lambda () ,@body)))
#+end_src

This macro enables grouping several expressions into one hook, like this

#+begin_src emacs-lisp :tangle no
  (zy!add-hook 'some-hook
    (do-something)
    (do-something-else))
#+end_src

*** ~zy!add-hooks~

#+begin_src emacs-lisp
  (defmacro zy!add-hooks (hook-list &rest body)
    "Add a lambda function of BODY to each hook in HOOK-LIST."
    (declare (indent 1) (debug (form def-body)))
    (let ((result '(progn)))
      (dolist (hook hook-list)
        (add-to-list
         'result
         `(add-hook ,hook (lambda () ,@body))
         'append))
      result))
#+end_src

This macro enables adding something to multiple hooks simultaneously, like this:

#+begin_src emacs-lisp :tangle no
  (zy!add-hooks ('some-hook 'another-hook)
    (do-something)
    (do-something-else))
#+end_src

** Straight

Install package with straight.

#+begin_src emacs-lisp
  (unless (featurep 'straight)
    ;; Bootstrap straight.el
    (defvar bootstrap-version)
    (let ((bootstrap-file
	   (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	  (bootstrap-version 5))
      (unless (file-exists-p bootstrap-file)
	(with-current-buffer
	    (url-retrieve-synchronously
	     "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	     'silent 'inhibit-cookies)
	  (goto-char (point-max))
	  (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage)))
  (setq straight-vc-git-default-clone-depth 1)
#+end_src

** Setup.el

*** Install It

#+begin_src emacs-lisp
  (straight-use-package '(setup :type git :host github :repo "phikal/setup.el"))
  (require 'setup)
#+end_src

*** :pkg and :pkg-when

#+begin_src emacs-lisp
  (setup-define :pkg
    (lambda (recipe)
      `(unless (straight-use-package ',recipe)
	 ,(setup-quit)))
    :documentation
    "Install RECIPE with `straight-use-package'.
  This macro can be used as HEAD, and will replace itself with the
  first RECIPE's package."
    :repeatable t
    :shorthand (lambda (sexp)
		 (let ((recipe (cadr sexp)))
		   (if (consp recipe)
		       (car recipe)
		     recipe))))
  (setup-define :pkg-when
    (lambda (recipe condition)
      `(if ,condition
	   (straight-use-package ',recipe)
	 ,(setup-quit)))
    :documentation
    "Install RECIPE with `straight-use-package' when CONDITION is met.
  If CONDITION is false, stop evaluating the body.  This macro can
  be used as HEAD, and will replace itself with the RECIPE's
  package.  This macro is not repeatable."
    :repeatable nil
    :indent 1
    :shorthand (lambda (sexp)
		 (let ((recipe (cadr sexp)))
		   (if (consp recipe)
		       (car recipe)
		     recipe))))
#+end_src

*** :delay

#+begin_src emacs-lisp
  (setup-define :delay
    (lambda (&optional time)
      `(run-with-idle-timer ,(or time 1) nil
                            (lambda () (require ',(setup-get 'feature)))))
    :documentation "Delay loading the feature until a certain amount of idle time has passed.")
#+end_src

*** :load-after

#+begin_src emacs-lisp
  (setup-define :load-after
      (lambda (&rest features)
	(let ((body `(require ',(setup-get 'feature))))
	  (dolist (feature (nreverse features))
	    (setq body `(with-eval-after-load ',feature ,body)))
	  body))
    :documentation "Load the current feature after FEATURES.")
#+end_src

*** :needs

#+begin_src emacs-lisp
  (setup-define :needs
      (lambda (executable)
	`(unless (executable-find ,executable)
	   ,(setup-quit)))
    :documentation "If EXECUTABLE is not in the path, stop here."
    :repeatable 1)
#+end_src

** Which-Key

#+begin_src emacs-lisp
  (setup (:pkg which-key)
    (which-key-mode +1))
#+end_src

** General.el

Manage keybinding with general.el, and rebind some default keys. Additionally,
define ~M-m~ as my leader-key.

#+begin_src emacs-lisp
  (setup (:pkg general)
    (define-prefix-command 'zy/leader-map)
    (general-define-key "M-m" 'zy/leader-map
			"M-z" 'back-to-indentation))
#+end_src

** ZyEmacs Keymaps

Define several leader keymaps.

#+begin_src emacs-lisp
  (define-prefix-command 'zy/leader-config-map)
  (general-define-key
   :keymaps 'zy/leader-map
   "m" 'zy/leader-config-map
   "M-m" 'zy/leader-config-map)
#+end_src

** Vertico and Minibuffer

#+begin_src emacs-lisp
  (setup (:pkg vertico)
    (vertico-mode +1))

  (setup (:pkg orderless)
    (setq completion-styles '(orderless partial-completion)
	  completion-category-defaults nil
	  completion-category-overrides '((file (styles partial-completion)))))

  (setup (:pkg savehist)
    (savehist-mode +1))

  (setup (:pkg marginalia)
    (marginalia-mode +1))

  (setq minibuffer-prompt-properties
	'(read-only t cursor-intangible t face minibuffer-prompt)
	enable-recursive-minibuffers t)
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
#+end_src

** Consult

Register utilities have not been configured.

#+begin_src emacs-lisp
  (setup (:pkg consult)
    (setq completion-in-region-function
          #'consult-completion-in-region)
    (advice-add #'completing-read-multiple
                :override #'consult-completing-read-multiple)
    (general-define-key
     "M-y" 'consult-yank-pop
     "<help> a" 'consult-apropos)
    (general-define-key
     :keymaps 'mode-specific-map
     "h" 'consult-history
     "m" 'consult-mode-command
     "k" 'consult-kmacro)
    (general-define-key
     :keymaps 'ctl-x-map
     "M-:" 'consult-complex-command
     "b" 'consult-buffer
     "4 b" 'consult-buffer-other-window
     "5 b" 'consult-buffer-other-frame
     "r b" 'consult-bookmark
     "p b" 'consult-project-buffer)
    (general-define-key
     :keymaps 'goto-map
     "e" 'consult-compile-error
     "f" 'consult-flymake
     "g" 'consult-goto-line
     "M-g" 'consult-goto-line
     "o" 'consult-outline
     "m" 'consult-mark
     "k" 'consult-global-mark
     "i" 'consult-imenu
     "I" 'consult-imenu-multi)
    (general-define-key
     :keymaps 'search-map
     "d" 'consult-find
     "D" 'consult-locate
     "g" 'consult-grep
     "G" 'consult-git-grep
     "r" 'consult-ripgrep
     "l" 'consult-line
     "L" 'consult-line-multi
     "m" 'consult-multi-occur
     "k" 'consult-keep-lines
     "u" 'consult-focus-lines)
    (general-define-key
     :keymaps 'isearch-mode-map
     "M-e" 'consult-isearch-history
     "M-s e" 'consult-isearch-history
     "M-s l" 'consult-line
     "M-s L" 'consult-line-multi)
    (general-define-key
     :keymaps 'minibuffer-local-map
     "M-s" 'consult-history
     "M-r" 'consult-history))
#+end_src

** Emacs Server

#+begin_src emacs-lisp
  (server-start)
#+end_src

* General Configuration

** Native Setqs

#+begin_src emacs-lisp
  (setq
   auto-save-default nil
   disabled-command-function nil
   fill-column 80
   frame-title-format (if *win64*
                          '("" "windows-emacs" " [%b]")
                        '("" "emacs" " [%b]"))
   inhibit-compacting-font-caches t
   make-backup-files nil
   system-time-locale "C"
   word-wrap-by-category t)
#+end_src

** Native Modes

#+begin_src emacs-lisp
  (zy!add-hook 'after-init-hook
    (delete-selection-mode +1)
    (global-display-line-numbers-mode +1)
    (global-subword-mode +1)
    (recentf-mode +1)
    (save-place-mode +1))

  (zy!add-hooks ('prog-mode-hook 'text-mode-hook)
    (setq-local show-trailing-whitespace t)
    (hl-line-mode +1)
    (load "kinsoku"))
#+end_src

** Super Save

#+begin_src emacs-lisp
  (setup (:pkg super-save)
    (setq super-save-auto-save-when-idle t)
    (super-save-mode +1))
#+end_src

** Avy

#+begin_src emacs-lisp
  (setup (:pkg avy)
    (general-define-key
     "M-r" 'avy-goto-char
     "M-t" 'avy-goto-char-timer))
#+end_src

** Magit

#+begin_src emacs-lisp
  (setup (:pkg magit)
    (general-define-key
     :keymaps 'ctl-x-map
     "g" 'magit-status
     "M-g" 'magit-dispatch))
#+end_src

** Valign

#+begin_src emacs-lisp
  (setup (:pkg valign)
    (add-hook 'org-mode-hook #'valign-mode)
    (add-hook 'markdown-mode-hook #'valign-mode))
#+end_src

** Restart-Emacs

Restart Emacs within Emacs, or open a new instance of Emacs.

#+begin_src emacs-lisp
  (setup (:pkg restart-emacs)
    (general-define-key
     :keymaps 'zy/leader-config-map
     "R" 'restart-emacs
     "N" 'restart-emacs-start-new-emacs))
#+end_src

* UI

** Toggle UI Elements

#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (column-number-mode +1)
#+end_src

** Theme

#+begin_src emacs-lisp
  (defvar zy/default-theme 'spacemacs-light
    "Theme to enable at startup")
  (when zy/default-theme
    (setup (:pkg spacemacs-theme)
      (require 'spacemacs-common)
      (load-theme zy/default-theme t))
    (setup (:pkg solaire-mode)
      (solaire-global-mode +1)))
#+end_src

** Font

Font configuration is a huge pain for Chinese Emacs users. Comments under this headline will be in Chinese, to meet the needs of its audience.

*** ZyEmacs 的字體機制

爲了能够給不同的 face 設置不同的西文字體和中文字體，甚至更多語種的字體（比如泰語字體），我經過一定的研究，制定了 ZyEmacs 的字體配置方案。目前（2020/03/16），我還沒有在網上看到能達到相同效果的配置。

在 ZyEmacs 中，​*字體列表（fontlist）*​是滿足如下格式的列表，它定義了「主字體」作爲默認顯示字體，並且爲各個字符集指定了適用於它們的字體。

#+begin_src emacs-lisp :tangle no
  '((主字體 主字體字號 主字體字重)
    (字符集1 用於該字符集的字體 該字體字重 APPEND)
    (字符集2 用於該字符集的字體 該字體字重 APPEND)
    ((字符集3 字符集4 字符集5) 用於這些字符集的字體 該字體字重 APPEND))
#+end_src

其中，若有任何字體的值爲 nil，或是在系統中沒有安裝，則會跳過它；字號和字重都可以省去或爲 nil，代表使用默認値；當 APPEND 爲 t 時，會附加在之原有的設置之後（與 ~set-fontset-font~ 的參數一致）。

下面定義了函數​~zy/apply-fontlist~​，用來將某一個字體列表應用到某一個 face：

#+begin_src emacs-lisp
  (defconst zy*default-font-size 16
    "Default font size.")
  (defconst zy*default-font-weight 'normal
    "Default font weight.")
  (defvar zy/zyfs-counter 0
    "How many fontset have been created by ZyEmacs.")

  (defun zy/apply-fontlist (fontlist &optional face frame)
    "Apply FONTLIST to FACE on FRAME.

  If FACE is nil or omitted, apply to the default face.

  If FRAME is nil, set the attributes for all existing frames, as
  well as the default for new frames.  If FRAME is t, change the
  default for new frames only."
    (let* ((face (if face face 'default))
           (main (car fontlist))
           (main-font (car main))
           (main-size (if (cadr main)
                          (cadr main)
                        zy*default-font-size))
           (main-weight (if (caddr main)
                            (caddr main)
                          zy*default-font-weight))
           (cflist (cdr fontlist))
           fontset
           (fontset-is-new nil))
      ;; 設置主字體。
      (unless (find-font (font-spec :family main-font
                                    :weight main-weight))
        (setq main-font nil))
      (set-face-attribute
       face
       frame
       :font (font-spec :family main-font
                        :size main-size
                        :weight main-weight))
      ;; 獲取 FACE 的 fontset。如果是 'unspecified'，則新建一個 fontset。
      (setq fontset (face-attribute face :fontset frame))
      (when (equal fontset 'unspecified)
        (setq fontset
              (new-fontset
               (format "-*-*-*-*-*--*-*-*-*-*-*-fontset-zyfs%d"
                       zy/zyfs-counter)
               nil)
              zy/zyfs-counter (+ zy/zyfs-counter 1)
              fontset-is-new t))
      ;; 遍歷 CFLIST，爲 FONTSET 的各個字符集設置字體。
      (dolist (cfpair cflist)
        (let* ((charset-or-charsets (car cfpair))
               (font (cadr cfpair))
               (weight (if (caddr cfpair)
                           (caddr cfpair)
                         zy*default-font-weight))
               (append (cadddr cfpair));
               (spec (font-spec :family font
                                :weight weight)))
          (when (find-font spec)
            (if (listp charset-or-charsets)
                (dolist (charset charset-or-charsets)
                  (set-fontset-font fontset charset spec frame
                                    append))
              (set-fontset-font fontset charset-or-charsets spec
                                frame append)))))
      ;; 如果 FONTSET 是新創建的，則爲 FACE 指定 :fontset 屬性。
      (when fontset-is-new
        (set-face-attribute face frame :fontset fontset))))
#+end_src

*** 設置字體列表

爲默認和變寬兩種 face 設置字體。

#+begin_src emacs-lisp
  (defconst zy*fontlist-default-preset
    '(("Iosevka Term Slab" 16)
        ((kana han cjk-misc bopomofo) "GenYoGothic TW"))
    "Preset value of `zy/fontlist-default'")

  (defconst zy*fontlist-vp-preset
    '(("Libertinus Serif" 18)
        ((kana han cjk-misc bopomofo) "GenYoMin TW"))
    "Preset value of `zy/fontlist-vp'")

  (defvar zy/fontlist-default
    (if (boundp 'zy/fontlist-default)
        zy/fontlist-default
      zy*fontlist-default-preset)
    "Fontlist used for most occasions.")

  (defvar zy/fontlist-vp
    (if (boundp 'zy/fontlist-vp)
        zy/fontlist-vp
      zy*fontlist-vp-preset)
    "Fontlist used for the variable-pitch face.")

  (when (display-graphic-p)
    (zy/apply-fontlist zy/fontlist-default 'default)
    (zy/apply-fontlist zy/fontlist-vp 'variable-pitch))
#+end_src

根據以下內容判斷等寬性：

#+begin_src text
等寬 等寬 等寬 等寬 等寬 mono mono mono mono mono
mono mono mono mono mono 等寬 等寬 等寬 等寬 等寬
#+end_src

** Darkroom Mode

#+begin_src emacs-lisp
  (straight-use-package 'darkroom)
  (setq darkroom-margins 0.05
        darkroom-text-scale-increase 1)
  (general-define-key
   :keymaps 'zy/leader-config-map
   "d" #'darkroom-mode)
  (zy!add-hook 'darkroom-mode-hook
    (hl-line-mode)
    (variable-pitch-mode))
#+end_src

* Lingual
** Encoding

Make everything UTF-8.

#+begin_src emacs-lisp
  (prefer-coding-system 'utf-8)
  (set-language-environment "UTF-8")
#+end_src

** Rime Input Method

#+begin_src emacs-lisp
  (setup (:pkg rime)
    (setq rime-user-data-dir (expand-file-name "rime" user-emacs-directory)
          default-input-method "rime"
          rime-show-candidate 'posframe))

  ;; Make the cursor orange when IM is active
  (defvar zy/im-cursor-color "#f68a06"
      "Default cursor color if an input method is active.")
  (defvar zy/default-cursor-color (frame-parameter nil 'cursor-color)
    "Default text cursor color.")
  (defun zy/change-cursor-color-on-im ()
    "Set cursor color depending IM state."
    (interactive)
    (set-cursor-color (if current-input-method
                          zy/im-cursor-color
                        zy/default-cursor-color)))
  (add-hook 'post-command-hook 'zy/change-cursor-color-on-im)
#+end_src

* Major Modes

** Emacs Lisp

#+begin_src emacs-lisp
  (zy!add-hook 'emacs-lisp-mode-hook
    (setq-local fill-column 70))
#+end_src

** Org

*** Basic Org

#+begin_src emacs-lisp
  (setup (:pkg (org :type git :host github :repo "bzg/org-mode"))
    (setq org-attach-id-dir "_org-att"
	  org-log-done 'time
	  org-src-window-setup 'current-window
	  org-tags-column 0)
    (zy!add-hook 'org-mode-hook
      (display-line-numbers-mode -1)
      (org-indent-mode +1)
      (visual-line-mode +1)))
#+end_src

*** GTD System

#+begin_src emacs-lisp
  (defvar zy/gtd-path (expand-file-name "org/org-gtd" zy/zybox-path)
    "The path of my GTD system root.")
  (defvar zy/gtd-inbox-path (expand-file-name "inbox.org" zy/gtd-path)
    "The path of `inbox.org' of my GTD system.")
  (defvar zy/gtd-gtd-path (expand-file-name "gtd.org" zy/gtd-path)
    "The path of `gtd.org' of my GTD system.")
  (defvar zy/gtd-someday-path (expand-file-name "someday.org" zy/gtd-path)
    "The path of `someday.org' of my GTD system.")

  (setq
   org-agenda-files `(,zy/gtd-inbox-path
                      ,zy/gtd-gtd-path
                      ,zy/gtd-someday-path)
   org-capture-templates `(("i" "inbox" entry
                            (file+headline ,zy/gtd-inbox-path "inbox")
                            "* TODO [#B] %U %i%?"
                            :empty-lines 1)
                           ("s" "someday" entry
                            (file+headline ,zy/gtd-someday-path "someday")
                            "* TODO [#C] %U %i%?"
                            :empty-lines 1)
                           ("t" "GTD" entry
                            (file+olp+datetree ,zy/gtd-gtd-path)
                            "* TODO [#B] %U %i%?"
                            :empty-lines 1))
   org-refile-targets `((,zy/gtd-gtd-path :maxlevel . 3)
                        (,zy/gtd-someday-path :level . 1))
   org-todo-keywords '((sequence "TODO(t)"
                                 "IN PROCESS(i)"
                                 "POSTPONED(p)"
                                 "|"
                                 "DONE(d)")
                       (sequence "|"
                                 "CANCELED(c)"))
   org-todo-keyword-faces '(("TODO" . (:foreground "#B71C1C" :weight bold))
                            ("IN PROCESS" . (:foreground "#8BC34A" :weight bold))
                            ("POSTPONED" . (:foreground "#F57C00" :weight bold))
                            ("DONE" . (:foreground "#33691E" :weight bold))
                            ("CANCELED" . (:foreground "#757575" :weight bold))))

  (general-define-key
   :keymaps 'zy/leader-map
   "a" 'org-agenda
   "c" 'org-capture)
#+end_src

*** Org-Appear

#+begin_src emacs-lisp
  (setup (:pkg org-appear)
    (add-hook 'org-mode-hook 'org-appear-mode)
    (setq-default org-hide-emphasis-markers t))
#+end_src

*** Org-Superstar

#+begin_src emacs-lisp
  (setup (:pkg org-superstar)
    (add-hook 'org-mode-hook 'org-superstar-mode)
    (setq org-superstar-headline-bullets-list '(#x25c9
                                                #x25cb
                                                #x25c8
                                                #x25c7
                                                #x2666)
          org-superstar-cycle-headline-bullets nil
          org-hide-leading-stars nil
          org-superstar-leading-bullet #x200b
          org-indent-mode-turns-on-hiding-stars nil
          org-superstar-item-bullet-alist '((42 . #x2605)
                                            (43 . #x2666)
                                            (45 . #x27a4))))
#+end_src

*** Org-Journal

#+begin_src emacs-lisp
  (setup (:pkg org-journal)
    (general-define-key
     :keymaps 'zy/leader-map
     "g" 'calendar
     "j" 'org-journal-new-entry)
    (setq org-journal-extend-today-until 3)
    (when zy/zybox-path
      (setq org-journal-dir (expand-file-name "org/org-journal" zy/zybox-path)
            org-journal-file-format "%F.org"
            org-journal-date-format "%F %a W%V\n"
            org-journal-date-prefix "#+TITLE: "
            org-journal-time-format "%R "
            org-journal-time-format-post-midnight "%R (midnight) "
            org-journal-time-prefix "\n* "
            org-journal-file-header "")))
#+end_src

* Finishing Jobs

** Setting Flags

#+begin_src emacs-lisp
  (customize-save-variable '*first-install* nil)
#+end_src
