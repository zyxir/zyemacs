#+title: init.org
#+property: header-args:emacs-lisp :tangle ~/.emacs.d/init.el

* Preface | 前言

** My Usage of Emacs | 我使用 Emacs 来做什麼

I use Emacs mainly in WSL (Windows Subsystem for Linux) for

- Using [[https://orgmode.org/][org-mode]], [[https://www.orgroam.com/][org-roam]], [[https://github.com/bastibe/org-journal][org-journal]], and other org utilities.
- Writing documents in: LaTeX, markdown, org.
- Coding in: Python.

** How to Install | 如何安裝

Press =C-c C-v t= (~org-babel-tangle~) while reading this file inside Emacs, to generate the actual
configuration file, ~init.el~. Relaunch Emacs to load the configuration file.

Alternatively, you can use this command in Shell to generate the configuration file: (replace "/path/to/init.org" with the actual path of this file)

#+begin_src shell
  emacs --batch --eval "(require 'org)" --eval '(org-babel-tangle-file "/path/to/init.org")'
#+end_src

** Naming Conventions | 命名慣例

This section is inspired by [[https://docs.doomemacs.org/latest/#/developers/conventions/emacs-lisp/naming-conventions][Doom Emacs naming conventions]].

Symbol names starts with ~NAMESPACE~, where ~NAMESPACE~ is usually ~zy~.

- ~NAMESPACE/NAME~ :: A public command designed to be used interactively, via =M-x= or a keybinding.
- ~NAMESPACE-NAME~ :: A non-interactive function, or a non-customizable variable.
- ~NAMESPACE$-NAME~ :: A customizable variable.
- ~NAMESPACE--NAME~ :: A protected function or variable.
- ~abc!~ or ~NAMESPACE-abc!~ :: A macro.

* Startup | 啓動

** Early Init

See [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Early-Init-File.html][The Early Init File]].

#+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
  ;; -*- lexical-binding: t; -*-
  (setq default-frame-alist '(;; Disable menu bar.
                              (menu-bar-lines . nil)
                              ;; Disable scroll bars.
                              (horizontal-scroll-bars . nil)
                              (vertical-scroll-bars . nil)
                              ;; Disable tool bar.
                              (tool-bar-lines . 0))
        menu-bar-mode nil
        scroll-bar-mode nil
        tool-bar-mode nil
        frame-inhibit-implied-resize t
        inhibit-startup-message t
        native-comp-async-report-warnings-errors nil
        package-enable-at-startup nil)
#+end_src

** Startup Timer

#+begin_src emacs-lisp
  (defun display-startup-echo-area-message ()
    (message
     (format "ZyEmacs ready in %.2f seconds."
             (float-time
              (time-subtract after-init-time before-init-time)))))
#+end_src

** Speed Up Startup

Adjust GC and ~file-name-handler-alist~ during startup, to speed up initialisation.

#+begin_src emacs-lisp
  (setq gc-cons-threshold most-positive-fixnum
        gc-cons-percentage 0.5
        --fnha-- file-name-handler-alist
        file-name-handler-alist nil)
  (add-hook 'emacs-startup-hook
            (lambda ()
              (setq gc-cons-threshold (* 32 1024 1024)
                    gc-cons-percentage 0.1
                    file-name-handler-alist (append file-name-handler-alist
                                                    --fnha--))))
#+end_src

** Load Path

Load the custom file, populate ~load-path~, and deal with autoloads.

#+begin_src emacs-lisp
  ;; Load the custom file.

  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))

  ;; Define the location of custom scripts.

  (defvar zy-lisp-dirs '("lisp" "site-lisp")
    "Directories of ZyEmacs custom lisp scripts.

  Directories are relative to `user-emasc-directory'.")

  ;; All valid directories, in expanded form.

  (defvar zy--lisp-dirs
    (let (rem)
      (dolist (dir zy-lisp-dirs rem)
	(setq dir (expand-file-name dir user-emacs-directory))
	(when (file-directory-p dir)
	  (push dir rem))))
    "All valid directories of `zy-lisp-dirs', in absolute path.

  A directory being valid means it exists.")

  ;; Populate `load-path'.

  (defun zy-add-to-load-path-recursively (dir)
    "Add DIR and its subdirectories to `load-path' recursively.

  DIR must be a absolute directory name that does not end in \"/\".

  This function do not check if DIR exists, nor if any directory is
  already in `load-path'."
    (push dir load-path)
    (let ((dot (concat dir "/."))
	  (dotdot (concat dir "/..")))
      (dolist (f (directory-files dir 'full nil 'nosort))
	(when (and
	       (not (equal f dot))
	       (not (equal f dotdot))
	       (file-directory-p f))
	  (zy-add-to-load-path-recursively f)))))

  (dolist (dir zy--lisp-dirs)
    (zy-add-to-load-path-recursively dir))
#+end_src

** Zy-Block

I utilize the ~zb~ (Zy-Block) macro for configuration grouping. It is like a simpler version of ~use-package~ or ~leaf~, but with my own custom feature set. See ~lisp/zy-block.el~ and ~lisp/zy-benchmark.el~ for its implementation.

#+begin_src emacs-lisp
  (require 'zy-block)
  (setq zb-global-flag-alist
        '((:enable . t)
          (:provide . t)
          (:protect . t)))

  ;; With "--zy-benchmark" option, enable benchmark for all zy-blocks.

  (add-to-list 'command-switch-alist
               '("--zy-benchmark" . (lambda (&rest ignored) t)))
  (when (member "--zy-benchmark" command-line-args)
    (push '(:benchmark . t) zb-global-flag-alist))
#+end_src

** Definitions

Personal information and top-level definitions.

#+begin_src emacs-lisp
  (zb init-defs
    ;; Personal information.

    (setq user-full-name "Eric Zhuo Chen"
          user-mail-address "zyxirchen@outlook.com")

    (defgroup zyemacs nil
      "ZyEmacs customization options.")

    ;; Operating system.

    (defconst zy-*windows* (eq system-type 'windows-nt)
      "If Emacs is run on Windows.")

    (defconst zy-*linux* (or (eq system-type 'gnu/linux)
                             (eq system-type 'linux))
      "If Emacs is run on Linux.

  Note that WSL is also Linux.")

    (defun zy-wsl-p ()
      "Return t if ZyEmacs is run on WSL."
      (unless (boundp 'zy--*wsl*)
        (defvar zy--*wsl*
          (equal
           0
           (shell-command
            "grep -q -e \"[Mm]icrosoft\" /proc/version"))
          "If ZyEmacs is run on WSL.

  Do not use this variable directly. Use `zy-wsl-p' instead."))
      zy--*wsl*)

    ;; Swtiches of ZyEmacs features.

    (defcustom zy$-use-zybox-p t
      "Should ZyEmacs use the workflow designed around Zybox.

  Zybox is private directory of Zyxir, and ZyEmacs has a set of
  utilities to work with Zybox. If you are not Zyxir, do not enable
  this.

  If no valid path of Zybox is detected or set by the user, this
  value will be automatically set to nil.

  Additionally, features like GTD, org-journal and org-roam default
  their file path to specific directories inside Zybox. If Zybox is
  disabled, those features won't load unless another custom path is
  set for them."
      :type 'boolean
      :group 'zyemacs))
#+end_src

** Macros

Some macros I use in this configuration.

#+begin_src emacs-lisp
  (zb init-macros
    (defmacro add-hook! (hook &rest body)
      "Add a lambda function of BODY to the value of HOOK."
      (declare (indent 1) (debug (form def-body)))
      `(add-hook ,hook (lambda () ,@body))))
#+end_src

** Package Management

Manage package with straight.

#+begin_src emacs-lisp
  (zb init-pkg
    ;; Setup straight.el

    (unless (featurep 'straight)
      (defvar bootstrap-version)
      (let ((bootstrap-file
             (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
            (bootstrap-version 5))
        (unless (file-exists-p bootstrap-file)
          (with-current-buffer
              (url-retrieve-synchronously
               "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
               'silent 'inhibit-cookies)
            (goto-char (point-max))
            (eval-print-last-sexp)))
        (load bootstrap-file nil 'nomessage)))
    (setq straight-vc-git-default-clone-depth 1)

    ;; Setup the :pkg keyword for zy-blocks.

    (defun zb-wrapper-pkg--handler (qname pr)
      "Install package according to PR.

  QNAME is the quoted zy-block name, used for issuing warnings.

  Currently, straight.el is used as the package manager. Thus, PR,
  which means package reference, is a straight recipe, or a list of
  straight recipes.

  Return 't' if all packages specified are successfully installed.

  If any of the packages specified is not successfully installed,
  return 'nil'."
      (let ((ret t))
        (if (or (symbolp pr)
                (and (consp pr)
                     (cdr pr)
                     (symbolp (cadr pr))
                     (string-equal (substring
                                    (symbol-name (cadr pr))
                                    0 1)
                                   ":")))
            (setq ret (straight-use-package pr))
          (while pr
            (if (straight-use-package (car pr))
                (setq pr (cdr pr))
              (setq pr nil
                    ret nil))))
        ret))

    (defun zb-wrapper-pkg (name arg body)
      "Execute BODY after package ARG is successfully installed.

  ARG is a package recipe, or a list of recipes."
      ;; Wrap BODY around package conditional.
      `((when (zb-wrapper-pkg--handler ',name ,arg) ,@body)))

    (zb-define-keyword ':pkg 'single #'zb-wrapper-pkg))
#+end_src

* General | 一般性設置

** Autoloads

Recursively update all autoloads under lisp and site-lisp directories, and load autoloads at startup.

#+begin_src emacs-lisp
  (zb init-autoloads
    ;; A single file for autoloads.

    (defvar zy-loaddefs-file (expand-file-name
                              "loaddefs.el"
                              user-emacs-directory)
      "File containing all autoloads for custom scripts.")

    ;; Autoloads updater.

    (defun zy/autoloads-update ()
      "Update all autoloads for non-package lisp scripts."
      (interactive)
      (require 'autoload)
      (unless (file-exists-p zy-loaddefs-file)
        (with-temp-buffer (write-file zy-loaddefs-file)))
      (let* ((files (apply
                     #'append
                     (mapcar
                      (lambda (dir)
                        (directory-files-recursively dir ".*\\.el"))
                      zy--lisp-dirs))))
        (dolist (file files)
          (let ((generated-autoload-load-name (file-name-base file)))
            (update-file-autoloads file t zy-loaddefs-file))))
      (byte-compile-file zy-loaddefs-file)
      (load zy-loaddefs-file t))

    ;; Update autoloads on exit.

    (add-hook 'kill-emacs-hook #'zy/autoloads-update)

    ;; Load autoloads now.

    (if (file-exists-p zy-loaddefs-file)
        (load zy-loaddefs-file t)
      (zy/autoloads-update)))
#+end_src

** Emacs Server

#+begin_src emacs-lisp
  (zb init-server
    :idle 1
    (require 'server)
    (unless (server-running-p)
      (server-start)))
#+end_src

** Key-Binding

Key-bindings are managed via ~general.el~, and ~which-key~ provides key hints. The leader key of ZyEmacs, which is =M-m= by default, is also defined here.

#+begin_src emacs-lisp
  (zb init-key
    :pkg '(general which-key)
    ;; Setup leader key.

    (defcustom zy$-leader-key "M-m"
      "The leader key of ZyEmacs."
      :type 'key
      :group 'zyemacs)
    (defcustom zy$-leader-key-alternatives '("M-`" "<f5>")
      "A list of alternative leader keys of ZyEmacs."
      :type 'sexp
      :group 'zyemacs)
    (define-prefix-command 'zy-leader-map)
    (general-define-key zy$-leader-key 'zy-leader-map
                        "M-z" 'back-to-indentation)
    (dolist (key zy$-leader-key-alternatives)
      (general-define-key key 'zy-leader-map))

    ;; Disable C-z for GUI.

    (when (display-graphic-p)
      (general-define-key "C-z" nil))

    ;; Setup other prefix commands.

    (define-prefix-command 'zy-leader-manage-map)
    (general-define-key
     :keymaps 'zy-leader-map
     "m" 'zy-leader-manage-map
     "M-m" 'zy-leader-manage-map)

    ;; Setup which-key.

    (which-key-mode +1))
#+end_src

** Minibuffer

Setup Vertico and other tools.

#+begin_src emacs-lisp
  (zb init-minibuffer
    :pkg '(vertico savehist marginalia orderless
                   consult embark embark-consult)
    ;; Enable modes.
    (vertico-mode +1)
    (savehist-mode +1)
    (marginalia-mode +1)

    ;; Setup Orderless.
    (setq completion-styles '(substring orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion))))

    ;; Other minibuffer settings.
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt)
          enable-recursive-minibuffers t)
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Consult settings.

    (setq completion-in-region-function
          #'consult-completion-in-region)
    (advice-add #'completing-read-multiple
                :override #'consult-completing-read-multiple)

    ;; Consult bindings.

    (general-define-key
     "M-y" 'consult-yank-pop
     "<help> a" 'consult-apropos)

    (general-define-key
     :keymaps 'mode-specific-map
     "h" 'consult-history
     "m" 'consult-mode-command
     "k" 'consult-kmacro)

    (general-define-key
     :keymaps 'ctl-x-map
     "M-:" 'consult-complex-command
     "b" 'consult-buffer
     "4 b" 'consult-buffer-other-window
     "5 b" 'consult-buffer-other-frame
     "r b" 'consult-bookmark
     "p b" 'consult-project-buffer)

    (general-define-key
     :keymaps 'goto-map
     "e" 'consult-compile-error
     "f" 'consult-flymake
     "g" 'consult-goto-line
     "M-g" 'consult-goto-line
     "o" 'consult-outline
     "m" 'consult-mark
     "k" 'consult-global-mark
     "i" 'consult-imenu
     "I" 'consult-imenu-multi)

    (general-define-key
     :keymaps 'search-map
     "d" 'consult-find
     "D" 'consult-locate
     "g" 'consult-grep
     "G" 'consult-git-grep
     "r" 'consult-ripgrep
     "l" 'consult-line
     "L" 'consult-line-multi
     "m" 'consult-multi-occur
     "k" 'consult-keep-lines
     "u" 'consult-focus-lines)

    (general-define-key
     :keymaps 'isearch-mode-map
     "M-e" 'consult-isearch-history
     "M-s e" 'consult-isearch-history
     "M-s l" 'consult-line
     "M-s L" 'consult-line-multi)

    (general-define-key
     :keymaps 'minibuffer-local-map
     "M-s" 'consult-history
     "M-r" 'consult-history)

    ;; Embark settings.

    (general-define-key
     "C-." #'embark-act
     "C-;" #'embark-dwim
     "C-h B" #'embark-bindings)
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none))))
    (add-hook 'embark-collect-mode-hook 'consult-preview-at-point-mode))
#+end_src

** Native Settings

Configuring native Emacs features.

#+begin_src emacs-lisp
  (zb init-native
    (setq
     auto-save-default nil
     disabled-command-function nil
     inhibit-compacting-font-caches t
     make-backup-files nil
     project-switch-commands '((project-find-file "Find file" "f")
                               (project-find-regexp "Find regexp" "g")
                               (project-find-dir "Find directory" "d")
                               (project-vc-dir "VC-Dir" "v")
                               (project-eshell "Eshell" "s")
                               (magit-project-status "Magit" "m"))
     system-time-locale "C"
     use-dialog-box nil
     word-wrap-by-category t)

    (setq-default fill-column 80)

    (add-hook! 'after-init-hook
      (delete-selection-mode +1)
      (global-display-line-numbers-mode +1)
      (global-subword-mode +1)
      (recentf-mode +1)
      (save-place-mode +1)
      (load "kinsoku" 'noerror 'nomessage))

    (add-hook! 'emacs-startup-hook
      (setq frame-title-format
            (if (zy-wsl-p)
                '("" "WSL Emacs" " [%b]")
              '("" "Emacs" " [%b]"))))

    (dolist (hook '(prog-mode-hook text-mode-hook))
      (add-hook! hook
        (setq-local show-trailing-whitespace t)
        (hl-line-mode +1)
        (auto-revert-mode +1))))
#+end_src

** Project Management

A project is a directory under version control. On each of my devices, I place my projects differently, thus I created the following mechanism to manage my projects.

#+begin_src emacs-lisp
  (zb init-proj
    ;; Path of projects.

    (defcustom zy$-projects-path nil
      "Where ZyEmacs should look for projects.

  This variable should be set individually on each machine."
      :type '(repeat directory)
      :group 'zyemacs)

    ;; Easy command to refresh projects.

    (defun zy/projects-refresh ()
      "Refresh project list.

  This function:

  - Load `project.el'.

  - Runs `project-forget-zombie-projects'.

  - Runs `project-remember-projects-under' on every path of
    `zy$-projects-path'."
      (interactive)
      (require 'project)
      (project-forget-zombie-projects)
      (dolist (path zy$-projects-path)
        (project-remember-projects-under path))))
#+end_src

** Restart-Emacs

Restart Emacs within Emacs, or open a new instance of Emacs. This is extremely useful for configuring Emacs.

[2022-03-20 Sun] ~restart-emacs-start-new-emacs~ does not receive prefix arguments, so switch it to a working fork.

#+begin_src emacs-lisp
  (zb init-restart-emacs
    :pkg '(restart-emacs
           :type git
           :host github
           :repo "wyuenho/restart-emacs"
           :branch "patch-1")

    (defun zy/test-config (&optional args)
      "Start a new instance of Emacs to test the configuration.

  This is a handy function for daily configuration: it apply
  `org-babel-tangle-file' on init.org to generate the modified
  configuration, update autoloads, and start a new instance of
  Emacs to test the new configuration, with --debug-init enabled.

  When called interactively ARGS in interpreted as follows

  - with a single `universal-argument' ('C-u'), Emacs is launched
    with '--zy-benchmark' flag to benchmark all zy-blocks.

  When called non-interactively, ARGS is a string or a list of
  string specifying the arguments to start Emacs with."
      (interactive "P")
      (require 'ob)
      (org-babel-tangle-file
       (expand-file-name "init.org" user-emacs-directory))
      (zy/autoloads-update)
      (setq args
            (cond
             ((called-interactively-p 'any)
              (when (equal args '(4)) '("--zy-benchmark")))
             ((stringp args)
              (split-string args " "))
             ((consp args)
              args)
             (t nil)))
      (push "--debug-init" args)
      (let ((restart-emacs--inhibit-kill-p t))
        (restart-emacs args)))

    (general-define-key
     :keymaps 'zy-leader-manage-map
     "R" 'restart-emacs
     "N" 'restart-emacs-start-new-emacs
     "T" 'zy/test-config))
#+end_src

** Save

#+begin_src emacs-lisp
  (zb init-save
    :pkg 'super-save
    (setq super-save-auto-save-when-idle t)
    (super-save-mode +1))
#+end_src

** Table Alignment

Visually align texts in tables in Markdown mode and Org mode.

#+begin_src emacs-lisp
  (zb init-align
    :pkg 'valign
    (dolist (hook '(org-mode-hook
                    markdown-mode-hook))
      (add-hook hook #'valign-mode)))
#+end_src

** Version Control

#+begin_src emacs-lisp
  ;; For native VC mode.

  (zb init-vc
    ;; Diff-hl highlight changed zones in the left fringe.
    :pkg 'diff-hl
    (dolist (hook '(text-mode-hook prog-mode-hook))
      (add-hook hook
                (lambda ()
                  (diff-hl-mode +1)
                  (diff-hl-flydiff-mode +1)))))

  ;; Simplify git operations with magit.

  (zb init-magit
    :pkg 'magit
    (general-define-key
     :keymaps 'ctl-x-map
     "g" 'magit-status
     "M-g" 'magit-dispatch))
#+end_src

** Zybox

Zybox is the collection of my personal files.

#+begin_src emacs-lisp
  (zb init-zybox
    (defcustom zy$-zybox-path nil
      "The path of Zybox, the collection of all my files.

  If it is not auto-detected, customize it to the actual path."
      :type 'directory
      :group 'zyemacs)

    (defun zy--find-zybox ()
      "Try to auto-detect the location of Zybox."
      (let* ((zybox-possible-locs-windows
              '("C:\\Zybox"
                "C:\\Users\\zyxir\\Zybox"
                "C:\\Users\\zyxir\\Documents\\Zybox"))
             (zybox-possible-locs-linux
              '("~/Zybox"
                "~/Documents/Zybox"
                "/mnt/c/Zybox"
                "/mnt/c/Users/zyxir/Zybox"
                "/mnt/c/Users/Documents/Zybox"))
             (zybox-possible-locs
              (cond
               (zy-*windows* zybox-possible-locs-windows)
               (zy-*linux* zybox-possible-locs-linux)
               (t nil)))
             loc-to-examine
             path-found)
        (while zybox-possible-locs
          (setq loc-to-examine (car zybox-possible-locs))
          (if (file-directory-p loc-to-examine)
              (setq path-found loc-to-examine
                    zybox-possible-locs nil)
            (setq zybox-possible-locs
                  (cdr zybox-possible-locs))))
        (if path-found
            (lwarn 'zyemacs :warning
                   "Zybox is auto-detected at %s." path-found)
          (lwarn 'zyemacs :warning "Could not auto-detect Zybox."))
        path-found))

    (when (and zy$-use-zybox-p
               (not zy$-zybox-path))
      (setq zy$-zybox-path (zy--find-zybox))
      (if zy$-zybox-path
          (customize-save-variable 'zy$-zybox-path zy$-zybox-path)
        (customize-save-variable 'zy$-use-zybox-p nil))))
#+end_src

* Text Editing | 文本編輯

** Incremental Search

Isearch-mb is used to enable using Chinese in isearch. The package has much more
functionalities than this, maybe I shall study it later by reading its [[https://github.com/astoff/isearch-mb/wiki][wiki]].

#+begin_src emacs-lisp
  (zb init-isearch
    :pkg 'isearch-mb
    (setq-default search-ring-max 200
                  regexp-search-ring-max 200
                  isearch-lazy-count t
                  isearch-regexp-lax-whitespace t)
    (isearch-mb-mode +1))
#+end_src

** Yasnippet

Turn on ~yas-minor-mode~ in need.

#+begin_src emacs-lisp
  (zb init-yasnippet
    :pkg '(yasnippet yasnippet-snippets)
    ;; Enable yasnippet in need.
    (with-eval-after-load "yasnippet"
      (yas-global-mode +1))
    ;; Disable yasnippet in some modes.
    (defvar zy-yas-disable-hooks '(TeX-mode-hook
                                   LaTeX-mode-hook)
      "Mode hooks where yasnippet should be disabled.")
    (defun zy-yas-turn-off ()
      "Turn off `yas-minor-mode'."
      (yas-minor-mode -1))
    (dolist (hook zy-yas-disable-hooks)
      (add-hook hook #'zy-yas-turn-off))
    ;; Snippet shortcut.
    (autoload 'yas-insert-snippet "yasnippet"
      "Choose a snippet to expand, pop-up a list of choices according
  to ‘yas-prompt-functions’."
      'interactive nil)
    (general-define-key
     "C-c s" #'yas-insert-snippet))
#+end_src

* UI | 用戶界面

** Basic UI Settings

#+begin_src emacs-lisp
  (zb init-ui
    ;; Toggle UI elements.
    (column-number-mode +1)

    ;; UI customization group.
    (defgroup zyemacs-ui nil
      "UI customization options of ZyEmacs."
      :group 'zyemacs))
#+end_src

** Distraction-Free Mode

#+begin_src emacs-lisp
  (zb init-distraction-free
    :pkg 'darkroom
    (setq darkroom-margins 0.1
          darkroom-text-scale-increase 1)
    (general-define-key
     :keymaps 'zy-leader-map
     "d" #'darkroom-mode)
    (add-hook 'darkroom-mode-hook
              (lambda ()
                (let ((inhibit-message t))
                  (delete-other-windows))
                (hl-line-mode 'toggle)
                (variable-pitch-mode 'toggle)))
    :after-load '(darkroom init-frame-size)
    (defun zy-darkroom-switch-size (&optional frame)
      "Switch FRAME size for `darkroom-mode'.

  All actions below assumes that there is only one window in
  FRAME, and GUI is active. Otherwise, do nothing.

  If 'darkroom-mode' is enabled, and current frame size is
  `zy$-frame-size-standard', resize to `zy$-frame-size-darkroom'.

  If 'darkroom-mode' is disabled, and current frame size is
  `zy$-frame-size-darkroom', resize to `zy$-frame-size-standard'.

  Otherwise, do nothing."
      (when (and (display-graphic-p)
                 (equal (progn
                          (when frame (select-frame frame))
                          (count-windows))
                        1))
        (let* ((width-cur (frame-parameter frame 'width))
               (height-cur (frame-parameter frame 'height))
               (s2d (and (boundp 'darkroom-mode)
                         darkroom-mode
                         (equal width-cur zy$-frame-width-standard)
                         (equal height-cur zy$-frame-height-standard)))
               (d2s (and (not
                          (and (boundp 'darkroom-mode)
                               darkroom-mode))
                         (equal width-cur zy$-frame-width-darkroom)
                         (equal height-cur zy$-frame-height-darkroom))))
          (cond
           (s2d (set-frame-size frame
                                zy$-frame-width-darkroom
                                zy$-frame-height-darkroom))
           (d2s (set-frame-size frame
                                zy$-frame-width-standard
                                zy$-frame-height-standard))
           (t nil)))))
    (add-hook 'darkroom-mode-hook #'zy-darkroom-switch-size)
    (add-to-list 'window-buffer-change-functions
                 #'zy-darkroom-switch-size))
#+end_src

** Font

~lisp/zy-font.el~ provides an abstraction of the basic Emacs font system, which is more practical for Chinese users, via these functions and macros:

- ~zf-set-font-for~
- ~zf-set-font~
- ~zf-font-available-p~
- ~zf-pick-font~

With which the fonts are customized here:

#+begin_src emacs-lisp
  (zb init-font
    :when (display-graphic-p)
    :hook-into 'after-init-hook
    (defcustom zy$-font-mono (zf-pick-font
                              "Sarasa Mono HC"
                              "Consolas"
                              "monospace")
      "Monospace font. Used on most occasions."
      :type 'sexp
      :group 'zyemacs-ui)
    (defcustom zy$-font-mono-cjk (zf-pick-font
                                  "Sarasa Mono HC"
                                  "Microsoft YaHei"
                                  "monospace")
      "Monospace font for CJK characters and punctuations."
      :type 'sexp
      :group 'zyemacs-ui)
    (defcustom zy$-font-sans (zf-pick-font
                              "Roboto"
                              "Calibri"
                              "sans-serif")
      "Sans-serif font. Used occasionally."
      :type 'sexp
      :group 'zyemacs-ui)
    (defcustom zy$-font-sans-cjk (zf-pick-font
                                  "Sarasa Mono HC"
                                  "Microsoft YaHei"
                                  "sans-serif")
      "Sans-serif font for CJK characters and punctuations."
      :type 'sexp
      :group 'zyemacs-ui)
    (defcustom zy$-font-serif (zf-pick-font
                               "IBM Plex Serif"
                               "Times New Roman"
                               "serif")
      "Serif font. Used occasionally."
      :type 'sexp
      :group 'zyemacs-ui)
    (defcustom zy$-font-serif-cjk (zf-pick-font
                                   "Source Han Serif HC"
                                   "STSong"
                                   "serif")
      "Serif font for CJK characters and punctuations."
      :type 'sexp
      :group 'zyemacs-ui)
    (defcustom zy$-font-title (zf-pick-font
                               "Roboto Slab"
                               "sans-serif")
      "Font used for titles."
      :type 'sexp
      :group 'zyemacs-ui)
    (defcustom zy$-font-title-cjk (zf-pick-font
                                   "Sarasa Mono HC"
                                   "Microsoft YaHei"
                                   "sans-serif")
      "CJK font used for titles."
      :type 'sexp
      :group 'zyemacs-ui)
    (defcustom zy$-font-size 16
      "Default font size for the UI."
      :type 'integer
      :group 'zyemacs-ui)
    (defcustom zy$-font-size-vp 18
      "Default font size for the 'variable-pitch' face."
      :type 'integer
      :group 'zyemacs-ui)

    ;; Set monospace font as default, and as the fixed pitch font.
    (zf-set-font zy$-font-mono zy$-font-size zy$-font-mono-cjk
                 'default)
    (zf-set-font zy$-font-mono zy$-font-size zy$-font-mono-cjk
                 'fixed-pitch)
    ;; Set serif font as the variable pitch font.
    (zf-set-font zy$-font-serif zy$-font-size-vp zy$-font-serif-cjk
                 'variable-pitch))
#+end_src

** Frame Size

#+begin_src emacs-lisp
  (zb init-frame-size
    (defcustom zy$-frame-width-standard 100
      "Standard frame width for new frames."
      :type 'integer
      :group 'zyemacs-ui)
    (defcustom zy$-frame-height-standard 40
      "Standard frame height for new frames."
      :type 'integer
      :group 'zyemacs-ui)
    (defcustom zy$-frame-width-darkroom 120
      "Standard frame width for Darkroom mode."
      :type 'integer
      :group 'zyemacs-ui)
    (defcustom zy$-frame-height-darkroom 40
      "Standard frame height for Darkroom mode."
      :type 'integer
      :group 'zyemacs-ui)

    (defun zy/resize-frame (&optional frame no-rem)
      "Resize FRAME to standard size.

  If NO-REM is nil or omitted, remember the frame size before
  resize in the 'width-rem' and 'height-rem' frame parameters."
      (interactive)
      (when (display-graphic-p)
        (let* ((width-standard (if (and (boundp 'darkroom-mode)
                                        darkroom-mode)
                                   zy$-frame-width-darkroom
                                 zy$-frame-width-standard))
               (height-standard (if (and (boundp 'darkroom-mode)
                                         darkroom-mode)
                                    zy$-frame-height-darkroom
                                  zy$-frame-height-standard))
               (is-standard (and
                             (= (frame-width) width-standard)
                             (= (frame-height) height-standard)))
               (width-rem (frame-parameter frame 'width-rem))
               (height-rem (frame-parameter frame 'height-rem)))
          (unless (or no-rem is-standard)
            (modify-frame-parameters frame
                                     `((width-rem . ,(frame-width))
                                       (height-rem . ,(frame-height)))))
          (if (and is-standard width-rem height-rem)
              (set-frame-size frame width-rem height-rem)
            (set-frame-size frame width-standard height-standard)))))

    (add-to-list 'after-make-frame-functions
                 #'zy/resize-frame)
    (add-hook 'emacs-startup-hook
              (lambda ()
                (zy/resize-frame nil 'no-rem))))
#+end_src

** Mode Line

#+begin_src emacs-lisp
  (zb init-mode-line
    ;; Hide minor modes that I don't care.
    :pkg 'dim
    :hook-into 'emacs-startup-hook
    (dim-minor-names '((auto-revert-mode nil autorevert)
                       (buffer-face-mode nil face-remap)
                       (eldoc-mode nil eldoc)
                       (org-indent-mode nil org-indent)
                       (org-roam-ui-follow-mode nil org-roam)
                       (org-roam-ui-mode " ORUI" org-roam)
                       (org-src-mode nil org-src)
                       (reftex-mode nil reftex)
                       (subword-mode nil subword)
                       (super-save-mode nil super-save)
                       (valign-mode nil valign)
                       (visual-line-mode nil simple)
                       (which-key-mode nil which-key)
                       (wucuo-mode nil wucuo)
                       (yas-minor-mode nil yasnippet))))
#+end_src

** Theme

*** Load Default Theme

#+begin_src emacs-lisp
  (zb init-theme
    (defun zy-theme-func-default ()
      "Default function to setup theme."
      (if (display-graphic-p)
          (progn
            (straight-use-package 'spacemacs-theme)
            (require 'spacemacs-common)
            (load-theme 'spacemacs-light t))
        (load-theme 'wombat t)))
    (defcustom zy$-theme-func #'zy-theme-func-default
      "Function to setup theme."
      :type 'function
      :group 'zyemacs-ui)
    (funcall zy$-theme-func))

  (zb init-solaire
    (defcustom zy$-use-solaire-p t
      "Should ZyEmacs install and enable 'solaire-mode'."
      :type 'boolean
      :group 'zyemacs-ui)
    :when (and zy$-use-solaire-p
               (display-graphic-p))
    :pkg 'solaire-mode
    (solaire-global-mode +1))
#+end_src

*** Theme Hooks

The ~after-enable-theme-hook~ is used to redefine faces after a theme reload.

#+begin_src emacs-lisp
  (zb init-theme-hooks
    (defvar after-enable-theme-hook nil
      "Hook run after a theme is enabled via `enable-theme'.

  `enable-theme' always enables the theme 'user' as well, and that
  won't trigger this hook.

  Note that `load-theme' also runs `enable-theme'.")

    (defun run-after-enable-theme-hook (theme)
      "Run `after-enable-theme-hook'."
      (unless (equal theme 'user)
        (run-hooks 'after-enable-theme-hook)))

    (advice-add #'enable-theme :after #'run-after-enable-theme-hook))
#+end_src

* Lingual | 語言相關
** Symbol Insersion

Easily insert special symbols, such as the "zero width space".

#+begin_src emacs-lisp
  (zb init-sym-ins
    (defun zy/insert-zero-width-space ()
      "Insert a zero-width space at point."
      (interactive)
      (insert #x200b))
    (general-define-key
     :keymaps 'ctl-x-map
     "8 s" #'zy/insert-zero-width-space))
#+end_src

** Encoding

Make everything UTF-8.

#+begin_src emacs-lisp
  (zb init-encoding
    (prefer-coding-system 'utf-8)
    (set-language-environment "UTF-8"))
#+end_src

** OpenCC

[[https://github.com/BYVoid/OpenCC][OpenCC]] is a tool and a library for conversion between traditional and simplified Chinese. [[https://github.com/xuchunyang/emacs-opencc][opencc.el]] integrate OpenCC into Emacs.

#+begin_src emacs-lisp
  (zb init-opencc
    :pkg 'opencc)
#+end_src

** Rime Input Method

#+begin_src emacs-lisp
  (zb init-rime
    :pkg 'rime
    (setq rime-user-data-dir (expand-file-name "rime" user-emacs-directory)
          default-input-method "rime"
          rime-show-candidate 'posframe))
#+end_src

** IM Cursor Color

Change cursor color based on the current input method.

#+begin_src emacs-lisp
  (zb init-im-cursor-color
    (defcustom zy$-im-cursor-color-alist
      '(("rime" . "#f68a06"))
      "Alist of (IM . COLOR) that specifies what cursor color should be
  used for each input method."
      :type 'sexp
      :group 'zyemacs-ui)
    (defvar zy--default-cursor-color (frame-parameter nil 'cursor-color)
      "Default text cursor color.")
    (defun zy--change-cursor-color-on-im ()
      "Set cursor color based on the current active input method."
      (let* ((im-color (alist-get current-input-method
                                  zy$-im-cursor-color-alist
                                  zy--default-cursor-color
                                  nil
                                  'string-equal)))
        (set-frame-parameter nil 'cursor-color im-color)))
    (add-hook 'post-command-hook #'zy--change-cursor-color-on-im))
#+end_src

* Major Modes | 各主模式設置

** Emacs Lisp

#+begin_src emacs-lisp
  (zb init-emacs-lisp
    :hook-into 'emacs-lisp-mode-hook
    (setq-local fill-column 70))
#+end_src

** TeX / LaTeX

TeX and LaTeX configuration around AUCTeX, RefTeX and CDLaTeX.

#+begin_src emacs-lisp
  (zb init-tex
     :pkg '(auctex reftex cdlatex)
     :after-load "tex"
     (add-to-list 'TeX-command-list
                  '("XeLaTeX"
                    "%`xelatex%(mode)%' --synctex=1%(mode)%' %t"
                    TeX-run-TeX
                    nil
                    t))
     (setq TeX-auto-save t
           TeX-parse-self t
           TeX-save-query nil
           TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view)))
     (setq-default TeX-engine 'xetex
                   TeX-command-default "XeLaTeX"
                   TeX-master nil
                   font-latex-fontify-script nil
                   TeX-PDF-mode t)

     ;; Ref management with RefTeX.
     (setq reftex-plug-into-AUCTeX t
           reftex-enable-partial-scans t
           reftex-save-parse-info t
           reftex-use-multiple-selection-buffers t)
     (add-hook 'LaTeX-mode-hook 'turn-on-reftex)

     ;; PDF Preview with PDF Tools.
     (setq-default TeX-view-program-selection '((output-pdf "PDF Tools"))
                   TeX-source-correlate-mode t
                   TeX-source-correlate-start-server t)
     (add-hook 'TeX-after-compilation-finished-functions
               #'TeX-revert-document-buffer))

  (zb init-tex-master
    "Automatic detection of `TeX-master'."
    :after-load 'init-tex

    (defvar zy-TeX-master-regexp '("main\\.tex" ".*\\.latexmain")
      "Possible patterns of `TeX-master'.")

    (defvar zy-TeX-master-depth 4
      "Maximum level of parent directory to look for `TeX-master'.")

    (defun zy-TeX-find-master ()
      "Find a possible TeX master file."
      (let ((curpath (expand-file-name "./"))
            (curdepth 0)
            foundfiles
            foundfile)
        (while (and (not foundfiles)
                    (not (> curdepth zy-TeX-master-depth)))
          (setq foundfiles (apply
                            #'append
                            (mapcar
                             (lambda (regexp)
                               (directory-files curpath 'full
                                                regexp 'nosort))
                             zy-TeX-master-regexp))
                curpath (expand-file-name ".." curpath)
                curdepth (+ curdepth 1)))
        (and
         (setq foundfile (car foundfiles))
         (file-exists-p foundfile)
         foundfile)))

    (defun zy-TeX-set-master (&rest ignored)
      "Find and set `TeX-master'."
      (setq-local TeX-master (or (zy-TeX-find-master) TeX-master)))

    (advice-add 'TeX-master-file :before #'zy-TeX-set-master))
#+end_src

** Markdown

#+begin_src emacs-lisp
  (zb init-markdown
    :pkg '(markdown-mode markdown-toc)
    (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
    (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
    (add-to-list 'auto-mode-alist '("README\\.md\\'" . gfm-mode)))
#+end_src

** PDF

#+begin_src emacs-lisp
  (zb init-pdf
    :pkg 'pdf-tools
    (pdf-loader-install)
    (:hook-into 'pdf-view-mode-hook
                (display-line-numbers-mode -1)
                (auto-revert-mode -1))
    (:after-load 'pdf-view
                 (general-define-key
                  :keymaps 'pdf-view-mode-map
                  ;; Less confirmation on buffer revert.
                  "g" #'revert-buffer-quick)))
#+end_src

** Verilog

#+begin_src emacs-lisp
  (zb init-verilog
    :pkg 'verilog-mode
    (:after-load
     'verilog-mode
     (setq verilog-indent-lists nil))
    (:hook-into
     'verilog-mode-hook
     (setq-local fill-column 100)))
#+end_src

* Org Related | Org 相關

** Basic Org

#+begin_src emacs-lisp
  (zb init-org
    :pkg '(org :type git :host github
               :repo "bzg/org-mode")
    (setq org-attach-id-dir "_org-att"
          org-src-window-setup 'current-window
          org-tags-column 0)
    :hook-into 'org-mode-hook
    (display-line-numbers-mode -1)
    (org-indent-mode +1)
    (visual-line-mode +1))

  (zb init-org-appear
    :pkg 'org-appear
    (add-hook 'org-mode-hook 'org-appear-mode)
    (setq-default org-hide-emphasis-markers t))

  (zb init-org-after-load
    :when (display-graphic-p)
    :after-load 'org
    ;; Load some modules.
    (require 'org-attach)
    ;; Faces setup.
    (defun zy--setup-org-faces ()
      "Setup custom faces for org-mode."
      ;; Headline faces.
      (dolist (level (number-sequence 1 8))
        (let ((face (intern (format "org-level-%d" level))))
          (zf-set-font zy$-font-title nil zy$-font-title-cjk face)
          (set-face-attribute
           face
           nil
           :height
           (string-to-number (format "1.%d" (max (- 4 level) 0)))
           :weight
           (if (< level 3)
               'bold
             'semi-bold))))
      ;; Other faces.
      (set-face-attribute 'org-todo nil
                          :foreground 'unspecified
                          :background 'unspecified
                          :weight 'bold
                          :font zy$-font-sans))
    (zy--setup-org-faces)
    (add-hook 'after-enable-theme-hook #'zy--setup-org-faces))
#+end_src

** GTD System

Enable the GTD system when ~zy$-gtd-path~ is valid.

#+begin_src emacs-lisp
  (zb init-gtd
    ;; Determine if GTD should be loaded.
    (defvar zy-gtd-path
      (cond
       ((boundp 'zy-gtd-path)
        zy-gtd-path)
       (zy$-use-zybox-p
        (expand-file-name "org/org-gtd" zy$-zybox-path))
       (t nil))
      "Where the GTD files are stored.")
    :when zy-gtd-path
    ;; Key-bindings.
    (general-define-key
     :keymaps 'zy-leader-map
     "a" 'org-agenda
     "c" 'org-capture)
    ;; Lazy load other configuration.
    :after-load 'org
    (defvar zy-gtd-inbox-file
      (expand-file-name "inbox.org" zy-gtd-path)
      "The path of \"inbox.org\" of the GTD system.")
    (defvar zy-gtd-gtd-file
      (expand-file-name "gtd.org" zy-gtd-path)
      "The path of \"gtd.org\" of the GTD system.")
    (defvar zy-gtd-someday-file
      (expand-file-name "someday.org" zy-gtd-path)
      "The path of \"someday.org\" of the GTD system.")
    (defvar zy-gtd-files
      `(,zy-gtd-inbox-file ,zy-gtd-gtd-file ,zy-gtd-someday-file)
      "List of all files of the GTD system.")
    ;; Create empty GTD file if not exists.
    (dolist (file zy-gtd-files)
      (unless (file-exists-p file)
        (write-region "" nil file)))
    ;; Settings.
    (setq
     org-log-done 'time
     org-log-refile 'time
     org-agenda-files `(,zy-gtd-inbox-file
                        ,zy-gtd-gtd-file
                        ,zy-gtd-someday-file)
     org-capture-templates `(("i" "inbox" entry
                              (file+headline ,zy-gtd-inbox-file "inbox")
                              "* TODO [#B] %u %i%?"
                              :empty-lines 1)
                             ("s" "someday" entry
                              (file+headline ,zy-gtd-someday-file "someday")
                              "* TODO [#C] %u %i%?"
                              :empty-lines 1)
                             ("t" "GTD" entry
                              (file+olp+datetree ,zy-gtd-gtd-file)
                              "* TODO [#B] %u %i%?"
                              :empty-lines 1))
     org-refile-targets `((,zy-gtd-gtd-file :maxlevel . 3)
                          (,zy-gtd-someday-file :level . 1))
     org-todo-keywords '((sequence "TODO(t)"
                                   "DOING(i)"
                                   "|"
                                   "DONE(d)")
                         (sequence "|"
                                   "CANCELED(c)"))
     org-todo-keyword-faces '(("TODO" .
                               (:inherit org-todo :foreground "#B71C1C"))
                              ("DOING" .
                               (:inherit org-todo :foreground "#8BC34A"))
                              ("DONE" .
                               (:inherit org-todo :foreground "#33691E"))
                              ("CANCELED" .
                               (:inherit org-todo :foreground "#757575"))))
    ;; Per-project TODO.
    (require 'project)
    (when (equal project--list 'unset)
      (project--read-project-list))
    (defvar zy-project-todo-regexp
      "^.*TODO\\.org$"
      "Possible TODO filenames for projects.")
    (dolist (proj project--list)
      (let* ((proj-path (car proj))
             proj-todos)
        (setq proj-todos (directory-files
                          proj-path
                          'full
                          zy-project-todo-regexp
                          'nosort))
        (when proj-todos
          (push (car proj-todos) org-agenda-files)))))
#+end_src

** Org-Export

Export settings of various format.

*** Common Export Options

The following elements should only be exported when demanded explicitly: table of contents, tags.

#+begin_src emacs-lisp
  (zb init-ox
    :after-load 'ox
    (setq org-export-with-toc nil
          org-export-with-tags nil))
#+end_src

*** HTML

#+begin_src emacs-lisp
  (zb init-ox-html
    :after-load 'ox-html
    ;; MHTML exporter that embeds images.
    ;; See https://niklasfasching.de/posts/org-html-export-inline-images/
    (defun org-html-export-to-mthml (async subtree visible body)
      (cl-letf (((symbol-function 'org-html--format-image)
                 'format-image-inline))
        (org-html-export-to-html async subtree visible body)))
    (defun format-image-inline (source attributes info)
      (let* ((ext (file-name-extension source))
             (prefix (if (string= "svg" ext)
                         "data:image/svg+xml;base64,"
                       "data:;base64,"))
             (data (with-temp-buffer (url-insert-file-contents source)
                                     (buffer-string)))
             (data-url (concat prefix (base64-encode-string data)))
             (attributes (org-combine-plists
                          `(:src ,data-url) attributes)))
        (org-html-close-tag
         "img"
         (org-html--make-attribute-string attributes)
         info)))
    (org-export-define-derived-backend 'html-inline-images 'html
      :menu-entry '(?h
                    "Export to HTML"
                    ((?m "As MHTML file" org-html-export-to-mhtml)))))
#+end_src

*** LaTeX (PDF)

#+begin_src emacs-lisp
  (zb init-ox-latex
    :after-load 'ox-latex
    ;; Retrieve the "zylatex.sty" file.

    (defvar zy-zylatex-file
      (file-truename
       (expand-file-name "zylatex.sty" user-emacs-directory))
      "Default LaTeX style file to use.")

    (defun zy/ox-latex-update-zylatex-file ()
      "Update the `zy-zylatex-file' from GitHub or Zybox."
      (interactive)
      (let* (ego-found
             std-latex-found
             possible-paths
             path-to-examine
             projet-name)
        ;; Try to find my 'ego' or 'std-latex' repo via project.el.
        (require 'project)
        (when (equal project--list 'unset)
          (project--read-project-list))
        (setq possible-paths project--list)
        (while possible-paths
          (setq path-to-examine (caar possible-paths)
                project-name (file-name-nondirectory
                              (directory-file-name path-to-examine)))
          (cond
           ((equal project-name "std-latex")
            (setq std-latex-found path-to-examine
                  possible-paths nil))
           ((equal project-name "ego")
            (setq ego-found path-to-examine
                  possible-paths nil))
           (t (setq possible-paths (cdr possible-paths)))))
        ;; When something is found, copy zylatex.sty from it, otherwise
        ;; download zylatex.sty from GitHub.
        (cond
         (ego-found
          (copy-file (expand-file-name
                      "std/std-latex/zylatex.sty" ego-found)
                     zy-zylatex-file 'ok-if-already-exists 'keep-time
                     'preserve-uid-gid 'preserve-permissions)
          (message "\"zylatex.sty\" copied from project \"ego\""))
         (std-latex-found
          (copy-file (expand-file-name
                      "zylatex.sty" std-latex-found)
                     zy-zylatex-file 'ok-if-already-exists 'keep-time
                     'preserve-uid-gid 'preserve-permissions)
          (message "\"zylatex.sty\" copied from project \"std-latex\""))
         (t
          (url-copy-file
           "https://raw.githubusercontent.com/zyxir/std-latex/main/zylatex.sty"
           zy-zylatex-file 'ok-if-already-exists)
          (message "\"zylatex.sty\" downloaded.")))))

    (unless (file-exists-p zy-zylatex-file)
      (zy/ox-latex-update-zylatex-file))

    ;; Configure LaTeX exporter.

    (setq org-latex-compiler "xelatex"
          org-latex-default-class "article"
          ;; Delete ".tex" file as well.
          org-latex-logfiles-extensions
          '("aux" "bcf" "blg" "fdb_latexmk" "fls" "figlist" "idx" "log"
            "nav" "out" "ptc" "run.xml" "snm" "tex" "toc" "vrb" "xdv")
          org-latex-classes
          `(("article"
             ,(format
               "\\documentclass[12pt]{article}
  \\usepackage[]{%s}
  [PACKAGES]
  [EXTRA]" (file-name-sans-extension zy-zylatex-file))
             ("\\section{%s}" . "\\section*{%s}")
             ("\\subsection{%s}" . "\\subsection*{%s}")
             ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
             ("\\paragraph{%s}" . "\\paragraph*{%s}")
             ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
            ("article-phone"
             ,(format
               "\\documentclass[12pt]{article}
  \\usepackage[layout=phone]{%s}
  [PACKAGES]
  [EXTRA]" (file-name-sans-extension zy-zylatex-file))
             ("\\section{%s}" . "\\section*{%s}")
             ("\\subsection{%s}" . "\\subsection*{%s}")
             ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
             ("\\paragraph{%s}" . "\\paragraph*{%s}")
             ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))

    ;; Export smartphone-friendly PDF.

    (defun zy-org-latex-export-to-pdf-phone
        (&optional async subtreep visible-only body-only ext-plist)
      "Export current buffer to smartphone-friendly PDF.

  The function works like `org-latex-export-to-pdf', except that
  `org-latex-default-class' is set to \"article-phone\"."
      (let ((org-latex-default-class "article-phone"))
        (org-latex-export-to-pdf async subtreep visible-only
                                 body-only ext-plist)))
    (org-export-define-derived-backend 'latex-pdf-phone 'latex
      :menu-entry '(?l
                    "Export to LaTeX"
                    ((?j "As PDF file (phone-friendly)"
                         zy-org-latex-export-to-pdf-phone)))))
#+end_src

** Org-Superstar

#+begin_src emacs-lisp
  (zb init-org-superstar
    :when (display-graphic-p)
    :pkg 'org-superstar
    (add-hook 'org-mode-hook 'org-superstar-mode)
    (setq org-superstar-headline-bullets-list '(#x25c9
                                                #x25cb
                                                #x25c8
                                                #x25c7
                                                #x2666)
          org-superstar-cycle-headline-bullets nil
          org-hide-leading-stars nil
          org-superstar-leading-bullet #x200b
          org-indent-mode-turns-on-hiding-stars nil
          org-superstar-item-bullet-alist '((42 . #x2605)
                                            (43 . #x2666)
                                            (45 . #x27a4)))
    :after-load 'org-superstar
    (dolist (face '(org-superstar-header-bullet
                    org-superstar-item
                    org-superstar-leading))
      (zf-set-font zy$-font-mono nil nil face)))
#+end_src

** Org-Journal

#+begin_src emacs-lisp
  (zb init-org-journal
    (setq org-journal-dir
          (cond
           ((boundp 'org-journal-dir)
            org-journal-dir)
           (zy$-use-zybox-p
            (expand-file-name "org/org-journal" zy$-zybox-path))
           (t nil)))
    :when org-journal-dir
    :pkg 'org-journal
    (general-define-key
     :keymaps 'zy-leader-map
     "g" 'calendar
     "j" 'org-journal-new-entry)
    (setq org-journal-extend-today-until 3
          org-journal-file-format "%F.org"
          org-journal-date-format "%F %a W%V\n"
          org-journal-date-prefix "#+title: "
          org-journal-time-format "%R "
          org-journal-time-format-post-midnight "%R (midnight) "
          org-journal-time-prefix "\n* "
          org-journal-file-header ""))
#+end_src

** Org-Roam

*** Basic Setup

Load org-roam when ~org-roam-directory~ is valid.

#+begin_src emacs-lisp
  (zb init-org-roam
    (setq org-roam-directory
          (cond
           ((boundp 'org-roam-directory)
            org-roam-directory)
           (zy$-use-zybox-p
            (expand-file-name "org/org-roam" zy$-zybox-path))
           (t nil)))
    :when org-roam-directory
    :pkg 'org-roam
    (define-prefix-command 'zy-leader-roam-map)
    (general-define-key
     :keymaps 'zy-leader-map
     "r" 'zy-leader-roam-map)
    (general-define-key
     :keymaps 'zy-leader-roam-map
     "i" 'org-roam-node-insert
     "f" 'org-roam-node-find
     "c" 'org-roam-capture
     "a" 'org-roam-alias-add
     "l" 'org-roam-buffer-toggle)
    :after-load 'org-roam
    (org-roam-db-autosync-mode))
#+end_src

*** Org-Roam-UI

#+begin_src emacs-lisp
  (zb init-org-roam-ui
    :pkg 'org-roam-ui
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t)
    ;; Open or close it with command.
    (defun zy/roam-ui-dwim ()
      "Do what I mean with `org-roam-ui-mode'.

  Without 'C-u' prefix, this function works as `org-roam-ui-open'.

  With one 'C-u' prefix, this function turns off `org-roam-ui-mode'"
      (interactive)
      (if (equal current-prefix-arg nil)
          (org-roam-ui-open)
        (org-roam-ui-mode -1)))
    (general-define-key
     :keymaps 'zy-leader-roam-map
     "u" 'zy/roam-ui-dwim))
#+end_src

** Markup

Chinese words are not separated by spaces, which cause trouble for org-mode. These commands allow surrounding texts with markup symbols as well as zero width spaces, making it easier for Chinese text markup. See [[https://emacs-china.org/t/org-mode/597/49][this post]] for more.

#+begin_src emacs-lisp
  (zb init-org-markup
    :after-load 'org
    (defvar zy-org-surround-docstring-template
      "Insert \"%s\" smartly.

  If there is no active region, call `org-self-insert-command';
  otherwise, surround the region with \"%s\", and insert zero-width
  space if there is no space before or after the region."
      "Template docstring for `zy-org-surround'.")
    (defun zy-whitespace-p (char)
      "Return t if CHAR is whitespace character, or nil otherwise."
      (or (equal char ?\t)
          (equal char ?\n)
          (equal char ?\s)
          (equal char #x200b)))
    (defmacro zy-org-surround (&rest keys)
      "Bind KEYS for org-mode markup surrounding.

  Each key in KEYS will have a new functionality: if no region is
  active, it inserts the symbol as exptected; but if there is an
  active region, it surrounds the region with the key, and insert
  zero-width space if there is no space before or after the region,
  to make the markup actually work."
      (let ((body nil)
            cmdname
            docstring)
        (dolist (key keys)
          (setq cmdname (intern (concat "zy/org-maybe-surround-" key))
                docstring (format
                           zy-org-surround-docstring-template key key))
          (push `(defun ,cmdname ()
                   ,docstring
                   (interactive)
                   (if (region-active-p)
                       (let ((beg (region-beginning))
                             (end (region-end)))
                         (save-excursion
                           (goto-char end)
                           (insert ,key)
                           (unless (zy-whitespace-p
                                    (following-char))
                             (insert-char #x200b))
                           (goto-char beg)
                           (unless (zy-whitespace-p
                                    (char-before))
                             (insert-char #x200b))
                           (insert ,key)))
                     (call-interactively #'org-self-insert-command)))
                body)
          (push `(general-define-key
                  :keymaps 'org-mode-map
                  ,key #',cmdname)
                body))
        (setq body (nreverse body))
        (push 'progn body)
        body))
    (zy-org-surround "~" "=" "*" "/" "_" "+" "$"))
#+end_src

* Features | 功能

** Bibliography Management

Text-based bibliography management.

*** Top Level

Some top level definitions.

#+begin_src emacs-lisp
  (zb init-bib
    :when zy$-use-zybox-p
    (defvar zy-bib-dir (expand-file-name "zotero" zy$-zybox-path)
      "Where all bibliography files are located.")
    (defvar zy-bib-files-relative '("references.bib")
      "Names of bibliography files, relative to `zy-bib-dir'.")
    (defvar zy-bib-files (mapcar
                          (lambda (file)
                            (expand-file-name file
                                              zy-bib-dir))
                          zy-bib-files-relative)
      "Names of bibliography files."))
#+end_src

*** Citar

#+begin_src emacs-lisp
  (zb init-citar
    :when zy$-use-zybox-p
    :pkg 'citar
    (setq citar-bibliography zy-bib-files)
    (general-define-key
     "C-c c" #'citar-insert-citation
     "C-c C" #'citar-insert-preset))
#+end_src
